local function line()
	print("\n")
end
local pass = 0
local fail = 0
print("🛡️  UNC Test  🛡️")
print("----------------------------")
print("🟢 Pass   🔴 Fail   🔵 No test")
warn("Credits to Kinzin#._.kinzin")
print()
local function getGlobal(path)
	local value = getfenv(0)

	while value ~= nil and path ~= "" do
		local name, nextValue = string.match(path, "^([^.]+)%.?(.*)$")
		value = value[name]
		path = nextValue
	end

	return value
end

local function testf(name, isfl)
	if isfl then
		print("🔵 - " .. name)
	else
	local f = getGlobal(name)

	if f == nil then
			print("🔴 - " .. name)
			fail = fail + 1
	elseif type(f) == "function" then
		local success, msg = pcall(function()
			return type(f) == "function"
		end)
		if success then
				print("🟢 - " .. name)
				pass = pass + 1
		else
				print("🔴 - " .. name .. " failed: " .. tostring(msg))
				fail = fail + 1
		end
	else
		print("🔵 - " .. name .. " (No test)")
	   end
	end
end

testf("printidentity", false)
testf("hookmetamethod", false)
testf("newcclosure", false)
testf("getnamecallmethod", false)
testf("checkcaller", false)
testf("hookfunction", false)
testf("decompile", false)
testf("Debug", true)
testf("debug.setupvalue", false)
testf("debug.setproto", false)
testf("debug.getconstants", false)
testf("debug.setstack", false)
testf("debug.setupvalue", false)
testf("debug.getinfo", false)
testf("debug.getproto", false)
testf("debug.getprotos", false)
testf("debug.setlocal", false)
testf("debug.setupvalues", false)
testf("debug.profileend", false)
testf("debug.getconstants", false)
testf("debug.setmetatable", false)
testf("debug.getregistry", false)
testf("debug.setupvalues", false)
testf("debug.getupvalues", false)
testf("debug.traceback", false)
testf("debug.getregistry", false)
testf("debug.profilebegin", false)
testf("debug.validlevel", false)
testf("firesignal", false)
testf("replicatesignal", false)
testf("appendfile", false)
testf("loadfile")
testf("getgenv", false)
testf("getscripthash", false)
testf("getscriptbytecode", false)
testf("getscriptfromthread", false)
testf("loadstring", false)
testf("saveinstance", false)
testf("setscriptbytecode", false)
testf("getscriptclosure", false)
testf("getcallingscript")
testf("readfile", false)
testf("writefile", false)
testf("makefolder")
testf("sethidden")
testf("sethiddenproperty")
testf("setfflag")
testf("setrawmetatable")
testf("setreadonly")
testf("setgcbehavior")
testf("__gc")
testf("gethiddenproperty")
testf("getthreadcontext")
testf("getthreadidentity")
testf("getgc")
testf("gethui")
testf("getcallingscript")
testf("getidentity")
testf("getreg")
testf("getconnections")
testf("getloadedmodules")
testf("getproperties")
testf("getsenv")
testf("getspecialinfo")
testf("getnamecall")
testf("getrawmetatable")
testf("getscriptclosure")
testf("getscripts")
testf("setsimulationradius")
testf("select")
testf("writedialog")
testf("rawequal")
testf("rawget")
testf("rawset")
testf("iscclosure")
testf("isfile")
testf("ishiddenproperty")
testf("isnetworkowner")
testf("iswindowactive")
testf("islclosure")
testf("isreadonly")
testf("pages")
testf("__pow")
testf("fireclickdetector")
testf("fireproximityprompt")
testf("firetouchinterest")
testf("keypress")
testf("keyrelease")
testf("mouse1click")
testf("mouse2click")
testf("mouse2press")
testf("mouse1press")
testf("mousemoveabs")
testf("mousemoverel")
testf("mousescroll")
testf("setscriptbytecode")
testf("restorescriptbytecode")
testf("getrbxsignals")
testf("getfunctions")
testf("hookinstance")
testf("get_real_adress")
testf("spoof_instance")
testf("isscriptable")
testf("setscriptable")
testf("getexecutorname")
testf("identifyexecutor")
testf("getscripts")
testf("dumpstring")
testf("Rconsole", true)
testf("rconsoleprint")
testf("rconsoleinfo")
testf("rconsolewarn")
testf("rconsoleerr")
testf("rconsoleclear")
testf("rconsolename")
testf("rconsoleinput")
testf("printconsole")
testf("isfolder")
testf("delfolder")
testf("delfile")
testf("getsynasset")
testf("messagebox")
testf("Bit", true)
testf("bit.bdiv")
testf("bit.badd")
testf("bit.bsub")
testf("bit.bmul")
testf("bit.bnot")
testf("bit.band")
testf("bit.bor")
testf("bit.bxor")
testf("bit.bswap")
testf("bit.ror")
testf("bit.rol")
testf("bit.tohex")
testf("bit.tobit")
testf("bit.lshift")
testf("bit.rshift")
testf("bit.arshift")
testf("Crypt", true)
testf("crypt.encrypt")
testf("crypt.decrypt")
testf("crypt.base64.encode")
testf("crypt.base64.decode")
testf("crypt.hash")
testf("crypt.derive")
testf("crypt.random")
testf("crypt.generatekey")
testf("Drawing", true)
testf("Drawing.new")
testf("Drawing.Fonts")
testf("isrenderobj")
testf("getrenderobj")
testf("setrenderproperty")
testf("getrenderproperty")
testf("cleardrawcache")
testf("Syn", true)
testf("syn.cache_replace")
testf("syn.cache_invalidate")
testf("syn.set_thread_identity")
testf("syn.get_thread_identity")
testf("syn.is_cached")
testf("syn.write_clipboard")
testf("syn.queue_on_teleport")
testf("syn.protect_gui")
testf("syn.unprotect_gui")
testf("syn.is_beta")
testf("syn.request")
testf("syn.secure_call")
testf("syn.create_secure_function")
testf("syn.run_secure_function")
testf("WebSocket", true)
testf("syn.websocket.connect")
testf("fluxus.queue_on_teleport")
testf("queue_on_teleport")
testf("protect_gui")
testf("unprotect_gui")
testf("request")
testf("secure_call")
testf("write_clipboard")
testf("create_secure_function")
testf("run_secure_function")
testf("cache_replace")
testf("cache_invalidate")
testf("set_thread_identity")
testf("get_thread_identity")
testf("is_cached")
testf("LockModule")
testf("UnlockModule")
testf("GetUnlockedModules")
testf("setfpscap")
testf("lz4compress")
testf("lz4decompress")
testf("setrbxclipboard")
testf("getcallbackvalue")
testf("isrbxactive")

line()

local total = pass + fail
local percentage = total > 0 and math.floor((pass / total) * 100) or 0

print("📝 UNC Test Summary 📝")
print("----------------------------")
print("✅ Pass: " .. pass)
print("❌ Fail: " .. fail)
print("📊 Total tested: " .. total)
print("📈 Success rate: " .. percentage .. "% " .. "(" .. pass .. "/" .. total .. ")")
print("----------------------------")

